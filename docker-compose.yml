services:
  # sqlserver:
  #   container_name: sqlserver
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - SA_PASSWORD=YourStrong!Passw0rd
  #   ports:
  #     - "1433:1433"
  #   networks:
  #     - tech_challenge_metrics_network
  #   volumes:
  #     - sql_data:/var/opt/mssql

  # api-consulta:
  #   build:
  #     context: ./TechChallengeFiap  # Caminho para a pasta onde está o Dockerfile
  #     dockerfile: Dockerfile        # (opcional) Especifica o arquivo Dockerfile  
  #     args:
  #          version: 1
  #   image: tech-challenge-consulta
  #   ports:
  #     - 8888:8080
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   depends_on:
  #     - sqlserver
  #     - rabbitmq
  #   networks:
  #     - tech_challenge_metrics_network

  api-add:
    build:
      context: ./TechChallengeFiapAdd  # Caminho para a pasta onde está o Dockerfile
      dockerfile: Dockerfile        # (opcional) Especifica o arquivo Dockerfile  
      args:
           version: 1
    image: tech-challenge-add
    ports:
      - 8889:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network

  api-delete:
    build:
      context: ./TechChallengeFiapDelete  # Caminho para a pasta onde está o Dockerfile
      dockerfile: Dockerfile        # (opcional) Especifica o arquivo Dockerfile  
      args:
           version: 1
    image: tech-challenge-delete
    ports:
      - 8887:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network

  api-update:
    build:
      context: ./TechChallengeFiapUpdate  # Caminho para a pasta onde está o Dockerfile
      dockerfile: Dockerfile        # (opcional) Especifica o arquivo Dockerfile  
      args:
           version: 1
    image: tech-challenge-update
    ports:
      - 8886:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network

  rabbitmq:
    image: "rabbitmq:management" # Imagem com a interface de gerenciamento do RabbitMQ
    ports:
      - "15672:15672" # Interface de gerenciamento RabbitMQ
      - "5672:5672" # Porta para comunicação de mensageria
    environment:
      RABBITMQ_DEFAULT_USER: guest # Usuário default
      RABBITMQ_DEFAULT_PASS: guest # Senha do usuário
    networks:
      - tech_challenge_metrics_network

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
      args:
        version: 1
    image: prometheus-local
    restart: always
    ports: 
      - 9090:9090
    networks:
      - tech_challenge_metrics_network
    volumes: 
      - './prometheus/data:/data'
  
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
      args:
        version: 1
    image: grafana-local
    restart: always
    ports:
      - 3000:3000
    networks: 
      - tech_challenge_metrics_network
  
  service-worker-add:
    build:
      context: ./TechChallengeFiapConsumer  # Ajuste conforme o caminho do projeto
      dockerfile: Dockerfile
    image: tech-challenge-service-worker-add
    restart: always  # Reinicia caso o container falhe
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      
  service-worker-delete:
    build:
      context: ./TechChallengeFiapConsumerDelete  # Ajuste conforme o caminho do projeto
      dockerfile: Dockerfile
    image: tech-challenge-service-worker-delete
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  service-worker-edit:
    build:
      context: ./TechChallengeFiapConsumerEdit  # Ajuste conforme o caminho do projeto
      dockerfile: Dockerfile
    image: tech-challenge-service-worker-edit
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - tech_challenge_metrics_network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  api-gateway:
    build:
      context: ./TechChallengeFiapApiGateway
      dockerfile: Dockerfile
    image: tech-challenge-api-gateway
    ports:
      - "8080:8080"
    networks:
      - tech_challenge_metrics_network
    depends_on:
      - api-add
      - api-delete
      - api-update
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
networks:
  tech_challenge_metrics_network:
    driver: bridge