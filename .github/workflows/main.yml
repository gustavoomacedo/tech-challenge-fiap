name: .NET Core CI

on:
  push:
    branches:
      - main # Dispara o pipeline em push para a branch main
  pull_request:
    branches:
      - main # Dispara o pipeline em pull requests para a branch main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "YourStrong!Passw0rd"
          ACCEPT_EULA: "Y"
        ports:
          - 1433:1433
        options: >-
          --health-cmd="bash -c 'echo > /dev/tcp/localhost/1433'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
    # Baixar o código do repositório
    - name: Checkout code
      uses: actions/checkout@v3

    # Configurar o .NET Core SDK
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x' # Versão do SDK, ajuste conforme necessário
        
    - name: Adicionar repositórios da Microsoft e instalar mssql-tools
      run: |
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo wget -q https://packages.microsoft.com/mssql-server/rhel/7/prod.repo -O /etc/apt/sources.list.d/mssql-server.list
            sudo apt-get update
            sudo apt-get install -y mssql-tools unixodbc-dev
            
    # Restaurar dependências
    - name: Restore dependencies
      run: dotnet restore TechChallengeFiap/TechChallengeFiap.sln

    - name: Criar banco de dados para testes
      run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong@Passw0rd" -Q "CREATE DATABASE TestDb"

    - name: Aguarde o SQL Server estar disponível
      run: |
          for i in {1..5}; do
            if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong@Passw0rd" -Q "SELECT 1" &>/dev/null; then
              echo "SQL Server está disponível"
              exit 0
            fi
            echo "Aguardando SQL Server iniciar..."
            sleep 2
          done
          echo "O SQL Server não iniciou a tempo."
          exit 1

    - name: Configurar connection string no appsettings.json
      run: |
          sed -i 's|"ConnectionString": ".*"|"ConnectionString": "Data Source=localhost,1433;Initial Catalog=TestDb;Persist Security Info=True;User ID=sa;Password=YourStrong@Passw0rd;Trust Server Certificate=True;"|' src/appsettings.json

    - name: Aplicar migrations
      run: dotnet ef database update --project TechChallengeFiap/TechChallengeFiap.csproj
      
    # Compilar o projeto
    - name: Build the project
      run: dotnet build TechChallengeFiap/TechChallengeFiap.sln --no-restore --configuration Release

    - name: Build the test project
      run: dotnet build ./TechChallengeFiap.Tests/TechChallengeFiap.Tests.csproj --configuration Debug
      
    - name: Build the test integrated project
      run: dotnet build ./TechChallengeFiap.Tests.Integration/TechChallengeFiap.Tests.Integration.csproj --configuration Debug
      
    # Executar testes
    - name: Run tests
      run: dotnet test TechChallengeFiap.Tests/TechChallengeFiap.Tests.csproj --no-build --verbosity normal
      
    # Executar testes integrados
    - name: Run integrated tests
      run: dotnet test TechChallengeFiap.Tests.Integration/TechChallengeFiap.Tests.Integration.csproj --no-build --verbosity normal
